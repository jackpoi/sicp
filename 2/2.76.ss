#|
1. 显式分派：不适合新增类型，也不适合新增操作
  无论新增操作还是类型，都需要修改通用代码
2. 数据导向：适合新增类型，也适合新增操作
  需要添加新的类型时，只需要新编写一个 package 放入操作表，不需要改变之前的代码，
  需要添加新的操作时，也不需要改变之前的代码，可以在一个新的 package 中为每个类型添加新的过程
3. 消息传递：适合新增类型，不适合新增操作
  消息传递将类型和操作整合在一起
  需要添加新类型时，只需要新编写一个 dispatch 过程，不需要修改之前的代码
  需要添加新操作时，需要将之前的所有类型都添加这个新操作
|#
