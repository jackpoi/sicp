; 内部使用队头队尾指针进行对应操作
(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-queue?) (null? front-ptr))
    (define (insert-queue! item)
      (cond
        ((empty-queue?)
          (let ((init-list (list item)))
            (set! front-ptr init-list)
            (set! rear-ptr init-list)
            front-ptr))
        (else
          (let ((new-item (list item)))
            (set-cdr! rear-ptr new-item)
            (set! rear-ptr new-item)
            front-ptr)))
    )
    (define (delete-queue!)
      (if (empty-queue?)
        (error "DELETE! called with an empty queue" queue)
        (begin
          (set! front-ptr (cdr front-ptr))
          front-ptr))
    )
    (define (print-queue)
      (display front-ptr)
    )
    (define (dispatch m)
      (cond ((eq? m 'insert-queue!)
              insert-queue!)
            ((eq? m 'delete-queue!)
              (delete-queue!))
            ((eq? m 'empty-queue?)
              (empty-queue?))
            ((eq? m 'print-queue)
              (print-queue))
            (else
              (error "Unknow operation -- DISPATCH" m)))
    )
    dispatch
  )
)

(define (print-queue queue)
  (display (car queue))
)

(define q (make-queue))
((q 'insert-queue!) 'a)
(q 'print-queue) (newline)
((q 'insert-queue!) 'b)
(q 'print-queue) (newline)
(q 'delete-queue!)
(q 'print-queue) (newline)
(q 'delete-queue!)
(q 'print-queue) (newline)

(exit)
